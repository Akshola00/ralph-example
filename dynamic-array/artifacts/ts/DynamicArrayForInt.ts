/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as DynamicArrayForIntContractJson } from "../DynamicArrayForInt.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace DynamicArrayForIntTypes {
  export type State = Omit<ContractState<any>, "fields">;

  export interface CallMethodTable {
    get: {
      params: CallContractParams<{ array: HexString; index: bigint }>;
      result: CallContractResult<bigint>;
    };
    update: {
      params: CallContractParams<{
        array: HexString;
        index: bigint;
        value: bigint;
      }>;
      result: CallContractResult<HexString>;
    };
    push: {
      params: CallContractParams<{ array: HexString; value: bigint }>;
      result: CallContractResult<HexString>;
    };
    pop: {
      params: CallContractParams<{ array: HexString }>;
      result: CallContractResult<[HexString, bigint]>;
    };
    sum: {
      params: CallContractParams<{ array: HexString }>;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<DynamicArrayForIntInstance, {}> {
  at(address: string): DynamicArrayForIntInstance {
    return new DynamicArrayForIntInstance(address);
  }

  tests = {
    get: async (
      params: Omit<
        TestContractParams<never, { array: HexString; index: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "get", params);
    },
    update: async (
      params: Omit<
        TestContractParams<
          never,
          { array: HexString; index: bigint; value: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "update", params);
    },
    push: async (
      params: Omit<
        TestContractParams<never, { array: HexString; value: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "push", params);
    },
    pop: async (
      params: Omit<
        TestContractParams<never, { array: HexString }>,
        "initialFields"
      >
    ): Promise<TestContractResult<[HexString, bigint]>> => {
      return testMethod(this, "pop", params);
    },
    sum: async (
      params: Omit<
        TestContractParams<never, { array: HexString }>,
        "initialFields"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "sum", params);
    },
  };
}

// Use this object to test and deploy the contract
export const DynamicArrayForInt = new Factory(
  Contract.fromJson(
    DynamicArrayForIntContractJson,
    "",
    "6b29a512dd1be54cddf58ab1e374743320c817c895c954fca2d6e40c0d1c0d64"
  )
);

// Use this class to interact with the blockchain
export class DynamicArrayForIntInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<DynamicArrayForIntTypes.State> {
    return fetchContractState(DynamicArrayForInt, this);
  }

  methods = {
    get: async (
      params: DynamicArrayForIntTypes.CallMethodParams<"get">
    ): Promise<DynamicArrayForIntTypes.CallMethodResult<"get">> => {
      return callMethod(
        DynamicArrayForInt,
        this,
        "get",
        params,
        getContractByCodeHash
      );
    },
    update: async (
      params: DynamicArrayForIntTypes.CallMethodParams<"update">
    ): Promise<DynamicArrayForIntTypes.CallMethodResult<"update">> => {
      return callMethod(
        DynamicArrayForInt,
        this,
        "update",
        params,
        getContractByCodeHash
      );
    },
    push: async (
      params: DynamicArrayForIntTypes.CallMethodParams<"push">
    ): Promise<DynamicArrayForIntTypes.CallMethodResult<"push">> => {
      return callMethod(
        DynamicArrayForInt,
        this,
        "push",
        params,
        getContractByCodeHash
      );
    },
    pop: async (
      params: DynamicArrayForIntTypes.CallMethodParams<"pop">
    ): Promise<DynamicArrayForIntTypes.CallMethodResult<"pop">> => {
      return callMethod(
        DynamicArrayForInt,
        this,
        "pop",
        params,
        getContractByCodeHash
      );
    },
    sum: async (
      params: DynamicArrayForIntTypes.CallMethodParams<"sum">
    ): Promise<DynamicArrayForIntTypes.CallMethodResult<"sum">> => {
      return callMethod(
        DynamicArrayForInt,
        this,
        "sum",
        params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends DynamicArrayForIntTypes.MultiCallParams>(
    calls: Calls
  ): Promise<DynamicArrayForIntTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      DynamicArrayForInt,
      this,
      calls,
      getContractByCodeHash
    )) as DynamicArrayForIntTypes.MultiCallResults<Calls>;
  }
}
