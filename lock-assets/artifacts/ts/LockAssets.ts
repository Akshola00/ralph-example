/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as LockAssetsContractJson } from "../LockAssets.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace LockAssetsTypes {
  export type State = Omit<ContractState<any>, "fields">;
}

class Factory extends ContractFactory<LockAssetsInstance, {}> {
  at(address: string): LockAssetsInstance {
    return new LockAssetsInstance(address);
  }

  tests = {
    lockAlphOnly: async (
      params: Omit<
        TestContractParams<never, { amount: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "lockAlphOnly", params);
    },
    lockTokenOnly: async (
      params: Omit<
        TestContractParams<never, { tokenId: HexString; amount: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "lockTokenOnly", params);
    },
    lockAlphAndToken: async (
      params: Omit<
        TestContractParams<
          never,
          { alphAmount: bigint; tokenId: HexString; tokenAmount: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "lockAlphAndToken", params);
    },
  };
}

// Use this object to test and deploy the contract
export const LockAssets = new Factory(
  Contract.fromJson(
    LockAssetsContractJson,
    "=4-2=2-2+27=3-1+c408d=11-1+b7e010c6c6f636b416c70684f6e6c79=47+f7=1+010d6c6f636b546f6b656e4f6e6c79=73+f7e01106c6f636b416c7068416e64546f6b656=49",
    "cdae77471b252db59a9318e4f1de08d7a93feb2a583fc775a4d332d60613fdd5"
  )
);

// Use this class to interact with the blockchain
export class LockAssetsInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<LockAssetsTypes.State> {
    return fetchContractState(LockAssets, this);
  }
}
