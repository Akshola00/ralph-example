/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as BlindedBidContractJson } from "../BlindedBid.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace BlindedBidTypes {
  export type Fields = {
    bidder: HexString;
    data: HexString;
    deposit: bigint;
    revealed: boolean;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    reveal: {
      params: CallContractParams<{
        value: bigint;
        fake: boolean;
        secret: HexString;
        highestBid: bigint;
        receiver: Address;
      }>;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  BlindedBidInstance,
  BlindedBidTypes.Fields
> {
  consts = { InvalidCaller: BigInt(0) };

  at(address: string): BlindedBidInstance {
    return new BlindedBidInstance(address);
  }

  tests = {
    reveal: async (
      params: TestContractParams<
        BlindedBidTypes.Fields,
        {
          value: bigint;
          fake: boolean;
          secret: HexString;
          highestBid: bigint;
          receiver: Address;
        }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "reveal", params);
    },
    withdraw: async (
      params: TestContractParams<BlindedBidTypes.Fields, { to: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdraw", params);
    },
  };
}

// Use this object to test and deploy the contract
export const BlindedBid = new Factory(
  Contract.fromJson(
    BlindedBidContractJson,
    "",
    "0cddc833f4a794ebe27be5564e50f5c1e546c3fe2e8079cdb65d0e079754e628"
  )
);

// Use this class to interact with the blockchain
export class BlindedBidInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<BlindedBidTypes.State> {
    return fetchContractState(BlindedBid, this);
  }

  methods = {
    reveal: async (
      params: BlindedBidTypes.CallMethodParams<"reveal">
    ): Promise<BlindedBidTypes.CallMethodResult<"reveal">> => {
      return callMethod(
        BlindedBid,
        this,
        "reveal",
        params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends BlindedBidTypes.MultiCallParams>(
    calls: Calls
  ): Promise<BlindedBidTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      BlindedBid,
      this,
      calls,
      getContractByCodeHash
    )) as BlindedBidTypes.MultiCallResults<Calls>;
  }
}
