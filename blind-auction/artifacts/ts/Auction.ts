/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as AuctionContractJson } from "../Auction.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace AuctionTypes {
  export type Fields = {
    blindedBidTemplateId: HexString;
    bidderTemplateId: HexString;
    auctioneer: Address;
    beneficiaryAsset: HexString;
    beneficiaryAssetAmount: bigint;
    biddingEnd: bigint;
    revealEnd: bigint;
    highestBidder: Address;
    highestBid: bigint;
    ended: boolean;
  };

  export type State = ContractState<Fields>;

  export type AuctionEndedEvent = ContractEvent<{
    winner: Address;
    amount: bigint;
  }>;
}

class Factory extends ContractFactory<AuctionInstance, AuctionTypes.Fields> {
  consts = {
    ErrorCodes: {
      InvalidArg: BigInt(0),
      BiddingAlreadyEnded: BigInt(1),
      InvalidBidderAddress: BigInt(2),
      InvalidCaller: BigInt(3),
      BidderNotExists: BigInt(4),
      BiddingNotEnd: BigInt(5),
      RevealAlreadyEnded: BigInt(6),
      RevealNotEnd: BigInt(7),
      AuctionEndAlreadyCalled: BigInt(8),
      HighestBidderNotAllowedToWithdraw: BigInt(9),
    },
  };

  at(address: string): AuctionInstance {
    return new AuctionInstance(address);
  }

  tests = {
    createBidder: async (
      params: Omit<TestContractParams<AuctionTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "createBidder", params);
    },
    getBidder: async (
      params: TestContractParams<AuctionTypes.Fields, { from: Address }>
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getBidder", params);
    },
    bid: async (
      params: TestContractParams<
        AuctionTypes.Fields,
        { from: Address; blindedBid: HexString; amount: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "bid", params);
    },
    reveal: async (
      params: TestContractParams<
        AuctionTypes.Fields,
        {
          from: Address;
          values: HexString;
          fakes: HexString;
          secrets: HexString;
        }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "reveal", params);
    },
    withdraw: async (
      params: Omit<TestContractParams<AuctionTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdraw", params);
    },
    auctionEnd: async (
      params: Omit<TestContractParams<AuctionTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "auctionEnd", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Auction = new Factory(
  Contract.fromJson(
    AuctionContractJson,
    "",
    "73c8954c460829ee726906762af2ea738d7824aa898cfb789971731a3d000b90"
  )
);

// Use this class to interact with the blockchain
export class AuctionInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<AuctionTypes.State> {
    return fetchContractState(Auction, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeAuctionEndedEvent(
    options: SubscribeOptions<AuctionTypes.AuctionEndedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Auction.contract,
      this,
      options,
      "AuctionEnded",
      fromCount
    );
  }
}
