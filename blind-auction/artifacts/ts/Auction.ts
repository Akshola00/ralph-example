/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
} from "@alephium/web3";
import { default as AuctionContractJson } from "../Auction.ral.json";
import { getContractByCodeHash } from "./contracts";
import { Bid, AllStructs } from "./types";

// Custom types for the contract
export namespace AuctionTypes {
  export type Fields = {
    beneficiary: Address;
    biddingEnd: bigint;
    revealEnd: bigint;
    ended: boolean;
    highestBidder: Address;
    highestBid: bigint;
  };

  export type State = ContractState<Fields>;

  export type AuctionEndedEvent = ContractEvent<{
    winner: Address;
    amount: bigint;
  }>;

  export interface CallMethodTable {
    getBidNum: {
      params: CallContractParams<{ bidder: Address }>;
      result: CallContractResult<bigint>;
    };
    getBid: {
      params: CallContractParams<{ bidder: Address; index: bigint }>;
      result: CallContractResult<Bid>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<AuctionInstance, AuctionTypes.Fields> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as AuctionTypes.Fields;
  }

  eventIndex = { AuctionEnded: 0 };
  consts = {
    ErrorCodes: {
      InvalidArg: BigInt(0),
      BiddingAlreadyEnded: BigInt(1),
      InvalidBidderAddress: BigInt(2),
      BiddingNotEnd: BigInt(3),
      RevealAlreadyEnded: BigInt(4),
      RevealNotEnd: BigInt(5),
      AuctionEndAlreadyCalled: BigInt(6),
    },
  };

  at(address: string): AuctionInstance {
    return new AuctionInstance(address);
  }

  tests = {
    bid: async (
      params: TestContractParams<
        AuctionTypes.Fields,
        { bidder: Address; blindedBid: HexString; deposit: bigint },
        { bids?: Map<HexString, Bid>; bidNum?: Map<Address, bigint> }
      >
    ): Promise<
      TestContractResult<
        null,
        { bids?: Map<HexString, Bid>; bidNum?: Map<Address, bigint> }
      >
    > => {
      return testMethod(this, "bid", params);
    },
    reveal: async (
      params: TestContractParams<
        AuctionTypes.Fields,
        {
          bidder: Address;
          values: HexString;
          fakes: HexString;
          secrets: HexString;
        },
        { bids?: Map<HexString, Bid>; bidNum?: Map<Address, bigint> }
      >
    ): Promise<
      TestContractResult<
        null,
        { bids?: Map<HexString, Bid>; bidNum?: Map<Address, bigint> }
      >
    > => {
      return testMethod(this, "reveal", params);
    },
    auctionEnd: async (
      params: Omit<
        TestContractParams<
          AuctionTypes.Fields,
          never,
          { bids?: Map<HexString, Bid>; bidNum?: Map<Address, bigint> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<
        null,
        { bids?: Map<HexString, Bid>; bidNum?: Map<Address, bigint> }
      >
    > => {
      return testMethod(this, "auctionEnd", params);
    },
    getBidNum: async (
      params: TestContractParams<
        AuctionTypes.Fields,
        { bidder: Address },
        { bids?: Map<HexString, Bid>; bidNum?: Map<Address, bigint> }
      >
    ): Promise<
      TestContractResult<
        bigint,
        { bids?: Map<HexString, Bid>; bidNum?: Map<Address, bigint> }
      >
    > => {
      return testMethod(this, "getBidNum", params);
    },
    getBid: async (
      params: TestContractParams<
        AuctionTypes.Fields,
        { bidder: Address; index: bigint },
        { bids?: Map<HexString, Bid>; bidNum?: Map<Address, bigint> }
      >
    ): Promise<
      TestContractResult<
        Bid,
        { bids?: Map<HexString, Bid>; bidNum?: Map<Address, bigint> }
      >
    > => {
      return testMethod(this, "getBid", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Auction = new Factory(
  Contract.fromJson(
    AuctionContractJson,
    "=6-1+b=3-1+3=3-1+5=3-1+8=3-1+b=14-1+6=83-1+e=40+7a037e0300012c00=134+7a037e0300012c00=91-1+c=167-1+5=56-2+70=225-1+d=138+7a047e0300012c00=51-1+7=21-1+c=40+7a047e0300012c00=270",
    "1356fae06f4830022d51691f7dc97f92514a3d108cab3722e985a29aaf405af0",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class AuctionInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<AuctionTypes.State> {
    return fetchContractState(Auction, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeAuctionEndedEvent(
    options: EventSubscribeOptions<AuctionTypes.AuctionEndedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Auction.contract,
      this,
      options,
      "AuctionEnded",
      fromCount
    );
  }

  methods = {
    getBidNum: async (
      params: AuctionTypes.CallMethodParams<"getBidNum">
    ): Promise<AuctionTypes.CallMethodResult<"getBidNum">> => {
      return callMethod(
        Auction,
        this,
        "getBidNum",
        params,
        getContractByCodeHash
      );
    },
    getBid: async (
      params: AuctionTypes.CallMethodParams<"getBid">
    ): Promise<AuctionTypes.CallMethodResult<"getBid">> => {
      return callMethod(Auction, this, "getBid", params, getContractByCodeHash);
    },
  };

  async multicall<Calls extends AuctionTypes.MultiCallParams>(
    calls: Calls
  ): Promise<AuctionTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Auction,
      this,
      calls,
      getContractByCodeHash
    )) as AuctionTypes.MultiCallResults<Calls>;
  }
}
