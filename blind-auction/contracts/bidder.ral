Contract Bidder(
  blindedBidTemplateId: ByteVec,
  auction: Auction,
  address: Address,
  mut blindedBidSize: U256
) {
  enum ErrorCodes {
    InvalidArg = 0
    InvalidCaller = 1
  }

  pub fn getAddress() -> Address {
    return address
  }

  @using(preapprovedAssets = true, updateFields = true)
  pub fn bid(blindedBid: ByteVec, amount: U256) -> () {
    checkCaller!(callerContractId!() == contractId!(auction), ErrorCodes.InvalidCaller)
    assert!(size!(blindedBid) == 32, ErrorCodes.InvalidArg)

    let (encodedImmFields, encodedMutFields) = BlindedBid.encodeFields!(selfContract!(), blindedBid, amount, false)
    copyCreateSubContract!{address -> ALPH: amount + 1 alph}(
      u256To8Byte!(blindedBidSize),
      blindedBidTemplateId,
      encodedImmFields,
      encodedMutFields
    )

    blindedBidSize = blindedBidSize + 1
  }

  @using(assetsInContract = true)
  pub fn reveal(values: ByteVec, fakes: ByteVec, secrets: ByteVec, highestBid: U256) -> U256 {
    checkCaller!(callerContractId!() == contractId!(auction), ErrorCodes.InvalidCaller)

    assert!(size!(values) / 32 == blindedBidSize, ErrorCodes.InvalidArg)
    assert!(size!(fakes) == blindedBidSize, ErrorCodes.InvalidArg)
    assert!(size!(secrets) / 32 == blindedBidSize, ErrorCodes.InvalidArg)

    let mut currentHighestBid = highestBid
    for (let mut index = 0; index < blindedBidSize; index = index + 1) {
      let value = u256From32Byte!(byteVecSlice!(values, index * 32, (index + 1) * 32))
      let fakeByte = byteVecSlice!(fakes, index, index + 1)
      let fake = if (fakeByte == #00) false else true
      let secret = byteVecSlice!(secrets, index * 32, (index + 1) * 32)

      let blindedBid = BlindedBid(subContractId!(u256To8Byte!(index)))
      currentHighestBid = blindedBid.reveal(value, fake, secret, currentHighestBid, selfAddress!())
    }

    return currentHighestBid
  }

  fn withdraw_() -> () {
    for (let mut index = 0; index < blindedBidSize; index = index + 1) {
      let bidderContractId = subContractId!(u256To8Byte!(index))
      if (contractExists!(bidderContractId)) {
        BlindedBid(bidderContractId).withdraw(address)
      }
    }
  }

  @using(assetsInContract = true)
  pub fn withdraw() -> () {
    checkCaller!(callerContractId!() == contractId!(auction), ErrorCodes.InvalidCaller)
    withdraw_()
    destroySelf!(address)
  }

  @using(assetsInContract = true)
  pub fn auctionEnd(to: Address, amount: U256) -> () {
    checkCaller!(callerContractId!() == contractId!(auction), ErrorCodes.InvalidCaller)
    transferTokenFromSelf!(to, ALPH, amount)
    withdraw_()
    destroySelf!(address)
  }
}