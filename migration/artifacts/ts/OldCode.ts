/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as OldCodeContractJson } from "../OldCode.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace OldCodeTypes {
  export type Fields = {
    n: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    get: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<OldCodeInstance, OldCodeTypes.Fields> {
  at(address: string): OldCodeInstance {
    return new OldCodeInstance(address);
  }

  tests = {
    get: async (
      params: Omit<TestContractParams<OldCodeTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "get", params);
    },
    migrate: async (
      params: TestContractParams<OldCodeTypes.Fields, { newCode: HexString }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "migrate", params);
    },
    migrateWithFields: async (
      params: TestContractParams<
        OldCodeTypes.Fields,
        { newCode: HexString; newN: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "migrateWithFields", params);
    },
  };
}

// Use this object to test and deploy the contract
export const OldCode = new Factory(
  Contract.fromJson(
    OldCodeContractJson,
    "",
    "161d631a28d43b6a8ac218f8c62395012a808d0359c5db69f03d20e14dfc2edf"
  )
);

// Use this class to interact with the blockchain
export class OldCodeInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<OldCodeTypes.State> {
    return fetchContractState(OldCode, this);
  }

  methods = {
    get: async (
      params?: OldCodeTypes.CallMethodParams<"get">
    ): Promise<OldCodeTypes.CallMethodResult<"get">> => {
      return callMethod(
        OldCode,
        this,
        "get",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends OldCodeTypes.MultiCallParams>(
    calls: Calls
  ): Promise<OldCodeTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      OldCode,
      this,
      calls,
      getContractByCodeHash
    )) as OldCodeTypes.MultiCallResults<Calls>;
  }
}
