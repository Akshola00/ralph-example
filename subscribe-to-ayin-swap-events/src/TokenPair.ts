/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as TokenPairContractJson } from "./TokenPair.ral.json";

// Custom types for the contract
export namespace TokenPairTypes {
  export type Fields = {
    tokenPairFactory: HexString;
    token0Id: HexString;
    token1Id: HexString;
    reserve0: bigint;
    reserve1: bigint;
    blockTimeStampLast: bigint;
    price0CumulativeLast: bigint;
    price1CumulativeLast: bigint;
    totalSupply: bigint;
    kLast: bigint;
    feeCollectorId: HexString;
  };

  export type State = ContractState<Fields>;

  export type MintEvent = ContractEvent<{
    sender: Address;
    amount0: bigint;
    amount1: bigint;
    liquidity: bigint;
  }>;
  export type BurnEvent = ContractEvent<{
    sender: Address;
    amount0: bigint;
    amount1: bigint;
    liquidity: bigint;
  }>;
  export type SwapEvent = ContractEvent<{
    sender: Address;
    amount0In: bigint;
    amount1In: bigint;
    amount0Out: bigint;
    amount1Out: bigint;
    to: Address;
  }>;
}

class Factory extends ContractFactory<
  TokenPairInstance,
  TokenPairTypes.Fields
> {
  at(address: string): TokenPairInstance {
    return new TokenPairInstance(address);
  }
}

// Use this object to test and deploy the contract
export const TokenPair = new Factory(
  Contract.fromJson(
    TokenPairContractJson,
    "",
    "0ba23e4d958bc08a84958516f398b18390a393e91d4952b9816864565388a596"
  )
);

// Use this class to interact with the blockchain
export class TokenPairInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TokenPairTypes.State> {
    return fetchContractState(TokenPair, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeMintEvent(
    options: SubscribeOptions<TokenPairTypes.MintEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TokenPair.contract,
      this,
      options,
      "Mint",
      fromCount
    );
  }

  subscribeBurnEvent(
    options: SubscribeOptions<TokenPairTypes.BurnEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TokenPair.contract,
      this,
      options,
      "Burn",
      fromCount
    );
  }

  subscribeSwapEvent(
    options: SubscribeOptions<TokenPairTypes.SwapEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TokenPair.contract,
      this,
      options,
      "Swap",
      fromCount
    );
  }

  subscribeAllEvents(
    options: SubscribeOptions<
      | TokenPairTypes.MintEvent
      | TokenPairTypes.BurnEvent
      | TokenPairTypes.SwapEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      TokenPair.contract,
      this,
      options,
      fromCount
    );
  }
}